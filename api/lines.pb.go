// Code generated by protoc-gen-go.
// source: api/lines.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/lines.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	NewRequest
	NewResponse
	StateRequest
	State
	MoveRequest
	MoveResponse
	Board
	Point
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_NOT_FOUND Status = 0
	Status_READY     Status = 1
	Status_GAME_OVER Status = 2
)

var Status_name = map[int32]string{
	0: "NOT_FOUND",
	1: "READY",
	2: "GAME_OVER",
}
var Status_value = map[string]int32{
	"NOT_FOUND": 0,
	"READY":     1,
	"GAME_OVER": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type LoginResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type NewRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NewRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type NewResponse struct {
	Changed bool   `protobuf:"varint,1,opt,name=changed" json:"changed,omitempty"`
	State   *State `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *NewResponse) Reset()                    { *m = NewResponse{} }
func (m *NewResponse) String() string            { return proto.CompactTextString(m) }
func (*NewResponse) ProtoMessage()               {}
func (*NewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewResponse) GetChanged() bool {
	if m != nil {
		return m.Changed
	}
	return false
}

func (m *NewResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type StateRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StateRequest) Reset()                    { *m = StateRequest{} }
func (m *StateRequest) String() string            { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()               {}
func (*StateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type State struct {
	Status    Status `protobuf:"varint,1,opt,name=status,enum=lines.api.Status" json:"status,omitempty"`
	Board     *Board `protobuf:"bytes,2,opt,name=board" json:"board,omitempty"`
	BestScore int32  `protobuf:"varint,3,opt,name=best_score,json=bestScore" json:"best_score,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *State) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NOT_FOUND
}

func (m *State) GetBoard() *Board {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *State) GetBestScore() int32 {
	if m != nil {
		return m.BestScore
	}
	return 0
}

type MoveRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	To *Point `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MoveRequest) GetTo() *Point {
	if m != nil {
		return m.To
	}
	return nil
}

type MoveResponse struct {
	Changed bool   `protobuf:"varint,1,opt,name=changed" json:"changed,omitempty"`
	State   *State `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MoveResponse) GetChanged() bool {
	if m != nil {
		return m.Changed
	}
	return false
}

func (m *MoveResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type Board struct {
	CreatedBy  string  `protobuf:"bytes,1,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Score      int32   `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Table      []int32 `protobuf:"varint,3,rep,packed,name=table" json:"table,omitempty"`
	Active     *Point  `protobuf:"bytes,4,opt,name=active" json:"active,omitempty"`
	NextColors []int32 `protobuf:"varint,5,rep,packed,name=next_colors,json=nextColors" json:"next_colors,omitempty"`
}

func (m *Board) Reset()                    { *m = Board{} }
func (m *Board) String() string            { return proto.CompactTextString(m) }
func (*Board) ProtoMessage()               {}
func (*Board) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Board) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Board) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Board) GetTable() []int32 {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *Board) GetActive() *Point {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Board) GetNextColors() []int32 {
	if m != nil {
		return m.NextColors
	}
	return nil
}

type Point struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Point) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "lines.api.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "lines.api.LoginResponse")
	proto.RegisterType((*NewRequest)(nil), "lines.api.NewRequest")
	proto.RegisterType((*NewResponse)(nil), "lines.api.NewResponse")
	proto.RegisterType((*StateRequest)(nil), "lines.api.StateRequest")
	proto.RegisterType((*State)(nil), "lines.api.State")
	proto.RegisterType((*MoveRequest)(nil), "lines.api.MoveRequest")
	proto.RegisterType((*MoveResponse)(nil), "lines.api.MoveResponse")
	proto.RegisterType((*Board)(nil), "lines.api.Board")
	proto.RegisterType((*Point)(nil), "lines.api.Point")
	proto.RegisterEnum("lines.api.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Game service

type GameClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error)
	GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*State, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/lines.api.Game/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error) {
	out := new(NewResponse)
	err := grpc.Invoke(ctx, "/lines.api.Game/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/lines.api.Game/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/lines.api.Game/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Game service

type GameServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	New(context.Context, *NewRequest) (*NewResponse, error)
	GetState(context.Context, *StateRequest) (*State, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lines.api.Game/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lines.api.Game/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lines.api.Game/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lines.api.Game/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lines.api.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Game_Login_Handler,
		},
		{
			MethodName: "New",
			Handler:    _Game_New_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Game_GetState_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Game_Move_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/lines.proto",
}

func init() { proto.RegisterFile("api/lines.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0x12, 0x51,
	0x14, 0x76, 0x86, 0x0e, 0x76, 0x0e, 0x50, 0xe9, 0x4d, 0x85, 0x09, 0xa2, 0x25, 0x63, 0x62, 0x90,
	0x05, 0xa4, 0xb8, 0xab, 0x0b, 0x53, 0x2c, 0xb2, 0x69, 0xa1, 0x4e, 0x5b, 0x13, 0xdd, 0x4c, 0x2e,
	0x70, 0x83, 0x93, 0xc0, 0xbd, 0x38, 0xf7, 0xf2, 0x17, 0xe3, 0xc6, 0x57, 0x70, 0xed, 0x53, 0xe9,
	0x23, 0xf8, 0x20, 0xe6, 0xfe, 0x4c, 0x45, 0x90, 0x9d, 0xcb, 0xf3, 0x7d, 0xe7, 0x7c, 0xe7, 0x3b,
	0x73, 0xce, 0x1d, 0x78, 0x80, 0xa7, 0x51, 0x63, 0x1c, 0x51, 0xc2, 0xeb, 0xd3, 0x98, 0x09, 0x86,
	0x5c, 0x1d, 0xe0, 0x69, 0x54, 0x2a, 0x8f, 0x18, 0x1b, 0x8d, 0x49, 0x43, 0xa6, 0x60, 0x4a, 0x99,
	0xc0, 0x22, 0x62, 0xd4, 0x24, 0xfa, 0x2f, 0x21, 0x7b, 0xc1, 0x46, 0x11, 0x0d, 0xc8, 0xa7, 0x19,
	0xe1, 0x02, 0x3d, 0x02, 0x77, 0xc6, 0x49, 0x1c, 0x52, 0x3c, 0x21, 0x9e, 0x55, 0xb1, 0xaa, 0x6e,
	0xb0, 0x2f, 0x81, 0x2e, 0x9e, 0x10, 0x74, 0x00, 0x76, 0x34, 0xf4, 0x6c, 0x85, 0xda, 0xd1, 0xd0,
	0x3f, 0x86, 0x9c, 0x29, 0xe6, 0x53, 0x46, 0x79, 0x92, 0x60, 0xdd, 0x25, 0x94, 0x01, 0xba, 0x64,
	0x91, 0x68, 0x6f, 0xb2, 0x3d, 0xc8, 0x28, 0xd6, 0x14, 0x7b, 0x70, 0x7f, 0xf0, 0x11, 0xd3, 0x11,
	0xd1, 0x39, 0xfb, 0x41, 0x12, 0xa2, 0x67, 0xe0, 0x70, 0x81, 0x05, 0x51, 0xad, 0x33, 0xcd, 0x7c,
	0xfd, 0x6e, 0xba, 0xfa, 0xb5, 0xc4, 0x03, 0x4d, 0xfb, 0x4f, 0x20, 0xab, 0xe3, 0x1d, 0x0d, 0x57,
	0xe0, 0x28, 0x1e, 0x3d, 0x87, 0xb4, 0xac, 0x98, 0x71, 0x45, 0x1e, 0x34, 0x0f, 0x37, 0x14, 0x67,
	0x3c, 0x30, 0x09, 0xb2, 0x77, 0x9f, 0xe1, 0x78, 0xf8, 0x8f, 0xde, 0x2d, 0x89, 0x07, 0x9a, 0x46,
	0x8f, 0x01, 0xfa, 0x84, 0x8b, 0x90, 0x0f, 0x58, 0x4c, 0xbc, 0x54, 0xc5, 0xaa, 0x3a, 0x81, 0x2b,
	0x91, 0x6b, 0x09, 0xf8, 0xaf, 0x20, 0x73, 0xc9, 0xe6, 0xbb, 0x9c, 0xa1, 0x0a, 0xd8, 0x82, 0xa9,
	0xaa, 0xbf, 0x5b, 0x5c, 0xb1, 0x88, 0x8a, 0xc0, 0x16, 0xcc, 0xbf, 0x82, 0xac, 0x16, 0xf8, 0x6f,
	0x5f, 0xeb, 0xbb, 0x05, 0x4e, 0x2b, 0xf1, 0x3e, 0x88, 0x09, 0x16, 0x64, 0x18, 0xf6, 0x57, 0xc6,
	0x95, 0x6b, 0x90, 0xd6, 0x0a, 0x1d, 0x81, 0xa3, 0xa7, 0xb2, 0xd5, 0x54, 0x3a, 0x90, 0xa8, 0xc0,
	0xfd, 0xb1, 0x9c, 0x35, 0x25, 0x51, 0x15, 0xa0, 0x2a, 0xa4, 0xf1, 0x40, 0x44, 0x73, 0xe2, 0xed,
	0xed, 0x18, 0xc6, 0xf0, 0xe8, 0x18, 0x32, 0x94, 0x2c, 0x45, 0x38, 0x60, 0x63, 0x16, 0x73, 0xcf,
	0x51, 0x2a, 0x20, 0xa1, 0xd7, 0x0a, 0xf1, 0x9f, 0x82, 0xa3, 0x2a, 0x50, 0x16, 0xac, 0xa5, 0x72,
	0xe5, 0x04, 0xd6, 0x52, 0x46, 0x2b, 0xe3, 0xc4, 0x5a, 0xd5, 0x4e, 0x20, 0xad, 0x17, 0x86, 0x72,
	0xe0, 0x76, 0x7b, 0x37, 0xe1, 0x9b, 0xde, 0x6d, 0xf7, 0x3c, 0x7f, 0x0f, 0xb9, 0xe0, 0x04, 0xed,
	0xb3, 0xf3, 0xf7, 0x79, 0x4b, 0x32, 0x9d, 0xb3, 0xcb, 0x76, 0xd8, 0x7b, 0xd7, 0x0e, 0xf2, 0x76,
	0xf3, 0xa7, 0x0d, 0x7b, 0x1d, 0x79, 0xce, 0x37, 0xe0, 0xa8, 0xf3, 0x45, 0xc5, 0x35, 0x93, 0xeb,
	0xaf, 0xa1, 0xe4, 0x6d, 0x13, 0xfa, 0xf3, 0xfb, 0xde, 0xd7, 0x1f, 0xbf, 0xbe, 0xd9, 0xc8, 0xcf,
	0xa9, 0x77, 0x35, 0x3f, 0x69, 0x8c, 0x25, 0x7d, 0x6a, 0xd5, 0xd0, 0x05, 0xa4, 0xba, 0x64, 0x81,
	0x1e, 0xae, 0x95, 0xfe, 0x79, 0x03, 0xa5, 0xc2, 0x26, 0x6c, 0xf4, 0x0a, 0x4a, 0x2f, 0xef, 0x67,
	0x12, 0x3d, 0x4a, 0x16, 0x52, 0xed, 0x2d, 0xec, 0x77, 0x88, 0xd0, 0x57, 0x5b, 0xdc, 0xda, 0xa4,
	0x11, 0xdd, 0x5a, 0xb1, 0x5f, 0x52, 0x72, 0x47, 0x08, 0x25, 0x72, 0x6a, 0xe5, 0x8d, 0xcf, 0xd1,
	0xf0, 0x0b, 0xba, 0x85, 0x3d, 0x79, 0x49, 0x68, 0xdd, 0xca, 0xda, 0x6d, 0x96, 0x8a, 0x5b, 0xb8,
	0xf1, 0x58, 0x56, 0xa2, 0x05, 0xff, 0x30, 0x11, 0x9d, 0xb0, 0xb9, 0xd6, 0x3c, 0xb5, 0x6a, 0x2d,
	0xe7, 0x43, 0x0a, 0x4f, 0xa3, 0x7e, 0x5a, 0xfd, 0x57, 0x5e, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x70, 0x3b, 0x14, 0x55, 0x93, 0x04, 0x00, 0x00,
}
